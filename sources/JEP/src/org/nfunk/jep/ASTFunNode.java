/*****************************************************************************

JEP - Java Expression Parser
    JEP is a Java package for parsing and evaluating mathematical
	expressions. It currently supports user defined variables,
	constant, and functions. A number of common mathematical
	functions and constants are included.

Author: Nathan Funk
Copyright (C) 2001 Nathan Funk

    JEP is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    JEP is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with JEP; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

*****************************************************************************/
/* Generated By:JJTree: Do not edit this line. ASTFunNode.java */
package org.nfunk.jep;

import org.nfunk.jep.function.*;
import java.util.*;

public class ASTFunNode extends SimpleNode {

  private PostfixMathCommandI pfmc;

  public ASTFunNode(int id) {
    super(id);
  }

  public ASTFunNode(Parser p, int id) {
    super(p, id);
  }


  /** Accept the visitor. **/
  public Object jjtAccept(ParserVisitor visitor, Object data) {
    return visitor.visit(this, data);
  }

  public void setFunction(PostfixMathCommandI pfmc_in)
  {
    pfmc = pfmc_in;
  }


  public String toString()
  {
    if (pfmc!=null)
    {
      return "FunNode: " + pfmc;
    }
    else
    {
      return "FunNode - no Function set!";
    }
  }

  public Object getValue()
  {
    Object value = new Double(0);
    Stack tempStack = new Stack();

    try
    {
      for (int i=0; i < jjtGetNumChildren(); i++)
      {
		  /** for each node in the parameter array, get the value of the node, and
		  pop it onto myStack which contains the Double values of each parameter
		  */
          tempStack.push(((Node)children[i]).getValue());
      }


      if (pfmc!=null)
      {
        pfmc.run(tempStack);
        value = tempStack.pop();//pop result off top of stack
      }
      else
      {
        System.out.println("No Function set!");
        value = new Double(0);
      }
    }
    catch (Exception e) //change to just Exceptions thrown by the run function
    {
      //System.out.println("FunNode.getValue() error: ");
      //System.out.println(e.getMessage());
      //e.printStackTrace();
    }

    return value;
  }
}